/** 異動說明
 *                 20221124 Frog Jump Co., YC White Scan/A03 Injection
 */
package com.cybersoft.bean;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import org.jconfig.Configuration;
import org.jconfig.ConfigurationManager;

import com.fubon.security.filter.SecurityTool;
import com.fubon.tp.util.XSSUtils;

/**
 * <p> Title: </p>
 *
 * <p> Description: </p>
 *
 * <p> Copyright: Copyright (c) 2007 </p>
 *
 * <p> Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
public class DataBaseBean {
	private Connection conn = null;
	private String sqlPrefix = "select";
	public static final LogUtils log_DataBaseBean = new LogUtils("DBBean");
	
	/** The XSSUtils */
	private XSSUtils xssUtils = null;
	
	private ArrayList<SQLParam> mSQLParam = new ArrayList<>();
	
	public DataBaseBean() {
		/** document why this constructor is empty */
	}

	/**
	 * setCommit
	 *
	 * @param flag String
	 */
	public boolean setAutoCommit(boolean flag) {
		try {
			if (conn == null || conn.isClosed()) {
				conn = makeConn();
			} else {
				conn.setAutoCommit(flag);
			}

			return true;
		} catch (Exception ex) {
			ex.printStackTrace();
			log_DataBaseBean.debug("--Set Auto Commit Error");
			return false;
		}
	}

	/**
	 * setCommit
	 *
	 * @param flag String
	 */
	public boolean commit() {
		try {
			if (conn == null || conn.isClosed()) {
				conn = makeConn();
			} else {
				conn.commit();
			}

			return true;
		} catch (Exception ex) {
			ex.printStackTrace();
			log_DataBaseBean.debug("-- Commit Error");
			return false;
		}
	}

	/**
	 * setRollBack
	 *
	 * @param flag boolean
	 */
	public boolean setRollBack() {
		try {
			conn.rollback();
			return true;
		} catch (Exception ex) {
			ex.printStackTrace();
			log_DataBaseBean.debug("--RollBack Error");
			return false;
		}
	}

    /**
     * executeSQL
     *
     * @param sql String
     * @return Hashtable
     */
    public Hashtable executeSQL(String sql)
    {
        Hashtable result=new Hashtable();
        if((ArrayList)executeSQL( sql, "select")!=null &&!((ArrayList)executeSQL( sql, "")).isEmpty())
        {
            result=(Hashtable) ((ArrayList)executeSQL( sql, "")).get(0);
        }

        return result;
    }

	public Object executeSQL(String sql, String type) {
		Object result = null;
		boolean stmtFlag = false;
		boolean rsFlag = false;
		ResultSet rs1 = null;
		try {
			if (conn == null || conn.isClosed()) {
				conn = makeConn();
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		
		if (conn != null && sql != null && !sql.equals("") && type != null && !type.equals("")) {

			if (type.equalsIgnoreCase(sqlPrefix)) {

				try (PreparedStatement prestmt = conn.prepareStatement(SecurityTool.output(sql))){
					stmtFlag = true;

					rs1 = prestmt.executeQuery();
					result = transferFormat(rs1);
					rsFlag = true;

				} catch (Exception e) {
					log_DataBaseBean.debug("--DataBaseBean.executeSqL(sql,type).NonSelectException--" + e.getMessage());
					/**rsFlag = false;*/
					e.printStackTrace();
					result = new ArrayList<>();
				} finally {
					try {
						if (rsFlag){
							rs1.close();
						}
					} catch (SQLException ex) {
						log_DataBaseBean.debug("--DataBaseBean.executeSqL(sql,type).finallyException--" + ex.getMessage());
						rsFlag = false;
						ex.printStackTrace();
						result = new ArrayList<>();
					}
				}
			} else {
				try (PreparedStatement prestmt = conn.prepareStatement(SecurityTool.output(sql))){
					/** conn.setAutoCommit(false); */
					conn.setAutoCommit(true);
					stmtFlag = true;

					prestmt.executeQuery();
					result= Boolean.valueOf(true) ;
					stmtFlag = true;

				} catch (Exception e) {
					log_DataBaseBean.debug("--DataBaseBean.executeSqL(sql,type).NonSelectException--" + e.getMessage());
					stmtFlag = false;
					e.printStackTrace();
					result= Boolean.valueOf(false) ;
				}
			}
		}		

		return result;
	}

	/**
	 * executeReportSQL for Crystal Reports
	 * 
	 * @param sql  String
	 * @param type String
	 * @return ResultSet
	 */
	public ResultSet executeReportSQL(String sql, String type) {
		boolean rsFlag = false;
		ResultSet rs1 = null;
		try {
			if (conn == null || conn.isClosed()) {
				conn = makeConn();
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		
		if (conn != null && sql != null && !sql.equals("") && type != null && !type.equals("")) {
			StringBuilder sSQLSB = new StringBuilder();
			sSQLSB.append(sql);
			
			/** Marked : fix (By : YC) -- 2023/03/15*/
			/** sSQLSB.append(" and 1 = ?"); */
			
			/** Fix : createReport.java/createPDF() 內，還要用 ResultSet，所以，此資安修改項目的策略不能使用 try-resource */
			try /**(PreparedStatement prestmt = conn.prepareStatement(SecurityTool.output(sql))) */{
				PreparedStatement prestmt = conn.prepareStatement(SecurityTool.output(sql));
				if (type.equalsIgnoreCase(sqlPrefix)) {
					/** prestmt.setInt(1, 1); */
					rs1 = prestmt.executeQuery();
					rsFlag = true;
				}
			} catch (Exception e) {
				log_DataBaseBean.debug("--DataBaseBean.executeReportSQL(sql,type).SelectException--" + e.getMessage());
				e.printStackTrace();
			} /** finally {
				try {
					if (rsFlag)
						rs1.close();
				} catch (SQLException ex) {
					log_DataBaseBean.debug("--DataBaseBean.executeReportSQL(sql,type).finallyException--" + ex.getMessage());
					ex.printStackTrace();
					rs1 = null;
				}
			} */
		}		
		

		return rs1;
	}

	public Object executeTranSQL(String sql, String type) {
		Object result = null;
		boolean rsFlag = false;
		ResultSet rs = null;
		try {
			if (conn == null || conn.isClosed()) {
				conn = makeConn();
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		/**
		 * log_DataBaseBean.debug("--DataBaseBean.executeTranSQL(sql,type).SQL=" + sql +";type="+type);
		 */
		if (conn != null && sql != null && !sql.equals("") && type != null && !type.equals("")) {
			StringBuilder sSQLSB = new StringBuilder();
			sSQLSB.append(sql);
			
			/** Marked : fix (By : YC) -- 2023/03/15*/
			/** sSQLSB.append(" and 1 = ?"); */
			try (PreparedStatement prestmt = conn.prepareStatement(SecurityTool.output(sql))){
				if (type.equalsIgnoreCase("select")) {
					/** prestmt.setInt(1, 1); */
					rs = prestmt.executeQuery();

					result = transferFormat(rs);
					rsFlag = true;
				} else {
					prestmt.executeQuery();
					result = Boolean.valueOf(true);
				}

			} catch (Exception e) {
				log_DataBaseBean.debug("--DataBaseBean.executeTranSQL(sql,type).NonSelectException--" + e.getMessage());
				e.printStackTrace();
				result = Boolean.valueOf(false);
			} finally {
				try {
					if (rsFlag)
						rs.close();
				} catch (SQLException ex) {
					log_DataBaseBean.debug("--DataBaseBean.executeTranSQL(sql,type).finallyException--" + ex.getMessage());
					ex.printStackTrace();
					result = Boolean.valueOf(false);
				}
			}
		}		

		return result;
	}

	/**
	 * <p>
	 * 產生Connection
	 * </p>
	 *
	 * @return Connection
	 * @throws Exception
	 */
	private Connection makeConn() {
		conn = null;
		/** 獲得Configuration對象根據Sys用於取得config.xml配置文件中的?容，從而獲得connection對象 */
		Configuration configuration = ConfigurationManager.getConfiguration();
		/** System.out.println(configuration.getConfigName()); */
		/** System.out.println(configuration.getXMLAsString()); */
		
		/** ---- Test  (By : YC) */
		String sMODE = configuration.getProperty("MODE", "--", "JDBC");
		String sJNDINAME = configuration.getProperty("JNDINAME", "--", "JDBC");
		String sDRIVER = configuration.getProperty("DRIVER", "--", "JDBC");
		String sURL = configuration.getProperty("URL", "--", "JDBC");
		String sUSER = configuration.getProperty("USER", "--", "JDBC");
		String sPWD = configuration.getProperty("PWD", "--", "JDBC");
		
		/**
		String sMODE = "JNDI";
		String sJNDINAME = "java:/comp/env/jdbc/tfbpg";
		String sDRIVER = "oracle.jdbc.driver.OracleDriver";
		String sURL = "jdbc:oracle:thin:@127.0.0.1:1521:orcl5";
		String sUSER = "tfbpg";
		String sPWD = "root";
		*/
		
		try {
			// 判斷連接方式
			/** System.out.println(configuration.getProperty("MODE", null, "JDBC")); */
			if (sMODE.equals("JNDI")) {
				log_DataBaseBean.debug("--JNDI Connect:" + sJNDINAME);
				// JNDI方式連接
				Context initContext = new InitialContext();
				DataSource ds = (DataSource) initContext.lookup(sJNDINAME);
				conn = ds.getConnection();
				/** conn.setAutoCommit(false); */
			} else {
				// 字符串連接，從配置文件中取得url、user和pwd
				Class.forName(sDRIVER);
				conn = DriverManager.getConnection(sURL, sUSER, sPWD);
			} 
		} catch (Exception e) {
			log_DataBaseBean.debug("--DataBaseBean.makeConn.MODE=" + sMODE + ",JNDINAME=" + sJNDINAME + ",Exception,Msg="
					+ e.getMessage());
			try {
				log_DataBaseBean.debug("--Change Conect to JDBC");
				// 改由config.xml設定值連線
				Class.forName(sDRIVER);
				conn = DriverManager.getConnection(sURL, sUSER, sPWD);
			} catch (Exception ex) {
				log_DataBaseBean.debug("--DataBaseBean.makeConn.Exception,Msg--" + ex.getMessage());
				ex.printStackTrace();
			}
		}
		return conn;
	}

	/**
	 * transferFormat 資料庫資料轉換
	 *
	 * @param resultset ResultSet 資料庫select出的資料
	 * @return Object (轉換後資料)
	 */
	public ArrayList transferFormat(ResultSet resultset) {
		/** log_DataBaseBean.debug("--transferFormat~~~~"); */
		try {
			ArrayList showContent = new ArrayList();
			ResultSetMetaData metadata = resultset.getMetaData();
			int colCount = metadata.getColumnCount();
			String[] colName = new String[colCount+1];
			for (int i = 1; i <= colCount; i++) {
				colName[i] = metadata.getColumnName(i);
				/** System.out.println(col_count+" Col_name="+col_name[i]); */
			}

			while (resultset.next()) {
				Hashtable content = new Hashtable();
				for (int i = 1; i <= colCount; i++) {
					content.put(colName[i],resultset.getObject(colName[i])==null?" ":resultset.getObject(colName[i]).toString());
				}
				showContent.add(content);
			}
			/** log_DataBaseBean.debug("--show_content{"+show_content+"}"); */
			return showContent;
		} catch (Exception e) {
			log_DataBaseBean.debug("--DataBaseBean.transferFormat.Exception--" + e.getMessage());
			/** log.debug("--DataBaseBean=", e.fillInStackTrace()); */
			e.printStackTrace();
			return new ArrayList<>();
		}
	}

	public void close() throws SQLException {
		if (this.conn != null)
			this.conn.close();
	}
	
	//限制長度
	public void AddSQLParam(String dataType,String value,int iDataLength){
    	if(value == null) value="";
    	if(value.length()>iDataLength) value = value.substring(0,iDataLength);

		SQLParam param = new SQLParam(dataType,value);
		mSQLParam.add(param);
	}
	public void AddSQLParam(String dataType,Date value){
		SQLParam param = new SQLParam(dataType,value);
		mSQLParam.add(param);
	}
	public void AddSQLParam(String dataType,double value){
		SQLParam param = new SQLParam(dataType,value);
		mSQLParam.add(param);
	}
	public void AddSQLParam(String dataType,long value){
		SQLParam param = new SQLParam(dataType,value);
		mSQLParam.add(param);
	}	
}
