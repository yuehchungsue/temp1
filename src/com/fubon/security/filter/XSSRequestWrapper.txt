package com.fubon.security.filter;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.util.regex.Pattern;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.owasp.esapi.ESAPI;
import org.owasp.esapi.Encoder;

import com.cybersoft.bean.LogUtils;

/**
 * @author YC
 *
 */
public class XSSRequestWrapper extends HttpServletRequestWrapper {
	
	public static final LogUtils log_XSSRequestWrapper = new LogUtils("XSSRequestWrapper");

	@SuppressWarnings("unused") 
	private ByteArrayOutputStream cachedBytes;

	/**
	 * XSSRequestWrapper
	 * 
	 * @param servletRequest
	 */
	public XSSRequestWrapper(HttpServletRequest servletRequest) {
		super(servletRequest);
		//this.hasXSSContent(servletRequest);
	}

	/**
	 * getRemoteUser
	 * 
	 * @return String
	 */
    @Override
    public String getRemoteUser() {
        String remoteUser=super.getRemoteUser();
        return stripXSS(remoteUser);
    }
    
	/**
	 * getParameterValues
	 * 
	 * @param String parameter
	 * @return String[]
	 */
	@Override
	public String[] getParameterValues(String parameter) {
		String[] values = super.getParameterValues(parameter);

		if (values == null) {
			return null;
		}

		int count = values.length;
		String[] encodedValues = new String[count];
		for (int i = 0; i < count; i++) {
			encodedValues[i] = stripXSS(values[i]);
		}

		return encodedValues;
	}

	/**
	 * getParameter --> getWebField</br>
	 * </br>
	 * @param String parameter
	 * @return String
	 */
	//@Override
	public String getWebField(String parameter) {
		String value = super.getParameter(parameter);
		log_XSSRequestWrapper.debug("value : " + value);
		
		if(this.hasXSSContent(value)){
			value = stripXSS(value);
			log_XSSRequestWrapper.debug("value : " + value);
		}
		return value;
	}

	/**
	 * getSession
	 * 
	 * @param boolean create
	 * @return HttpSession
	 */
	@Override
	public HttpSession getSession(boolean create) {
        return super.getSession(create);
	}
	
	/**
	 * setAttribute
	 * 
	 * @param String parameter
	 * @param Object o
	 * @return void
	 */
	@Override
	public void setAttribute(String name, Object object) {
		if(object instanceof String) {
			
			String validateValue = "";
			
			/** encoder */
			Encoder encoder = ESAPI.encoder();
			
			/** validateString */
			if(StringUtils.isEmpty((String) object)) {
				validateValue = "";
			}else {
				validateValue = encoder.decodeForHTML(encoder.encodeForHTML((String) object));
			}
			
			/** stripXSS */
			super.setAttribute(name, stripXSS(validateValue));
		}else {
			super.setAttribute(name, object);
		}
	}
	
	/**
	 * setAttribute
	 *
	 * @param String type 
	 * @param String parameter
	 * @param Object o
	 * @return void
	 */
	public void setAttribute(String type, String name, Object object) {
		if(StringUtils.equalsIgnoreCase("session", type)){
			if(object instanceof String) {
				
				String validateValue = "";
				
				/** encoder */
				Encoder encoder = ESAPI.encoder();
				
				/** validateString */
				if(StringUtils.isEmpty((String) object)) {
					validateValue = "";
				}else {
					validateValue = encoder.decodeForHTML(encoder.encodeForHTML((String) object));
				}
				
				/** stripXSS */
				((HttpSession) this.getSession(false)).setAttribute(name, stripXSS(validateValue));
			}else {
				((HttpSession) this.getSession(false)).setAttribute(name, object);
			}
		}else{
			if(object instanceof String) {
				
				String validateValue = "";
				
				/** encoder */
				Encoder encoder = ESAPI.encoder();
				
				/** validateString */
				if(StringUtils.isEmpty((String) object)) {
					validateValue = "";
				}else {
					validateValue = encoder.decodeForHTML(encoder.encodeForHTML((String) object));
				}
				
				/** stripXSS */
				super.setAttribute(name, stripXSS(validateValue));
			}else {
				super.setAttribute(name, object);
			}			
		}
	}
	
	/**
	 * setAttribute
	 *
	 * @param HttpSession session
	 * @param String parameter
	 * @param Object o
	 * @return void
	 */
	public void setAttribute(HttpSession session, String name, Object object) {
		if(object instanceof String) {
			
			String validateValue = "";
			
			/** encoder */
			Encoder encoder = ESAPI.encoder();
			
			/** validateString */
			if(StringUtils.isEmpty((String) object)) {
				validateValue = "";
			}else {
				validateValue = encoder.decodeForHTML(encoder.encodeForHTML((String) object));
			}
			
			/** stripXSS */
			session.setAttribute(name, stripXSS(validateValue));
		}else {
			session.setAttribute(name, object);
		}
	}
	
	/**
	 * getHeader
	 * 
	 * @param String name
	 * @return String
	 */
	@Override
	public String getHeader(String name) {
		String value = super.getHeader(name);
		return stripXSS(value);
	}

	/**
	 * Check if : has XSS Content
	 * 
	 * @param request
	 * @return boolean
	 */
	public boolean hasXSSContent(String value) {
		try {
			if(!StringUtils.isEmpty(value)){
				
				log_XSSRequestWrapper.debug("value : " + value);
				
				if (value.equals(this.stripXSS(value))) {
					return false;
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		// log.error("XSS defense, parameter: " + originJson);
		return true;
	}

	/**
	 * Check if : has XSS Content
	 * 
	 * @param String value
	 * @return boolean
	 */
	public boolean hasXSSContent(ServletRequest request) {
		BufferedReader reader;
		StringBuffer buffer = new StringBuffer();
		String line = null;
		String originJson = "";

		try {
			reader = request.getReader();
			while ((line = reader.readLine()) != null) {
				buffer.append(line);
			}

			originJson = buffer.toString();
			if(!StringUtils.isEmpty(originJson.toString())){
				
				log_XSSRequestWrapper.debug("originJson.toString() : " + originJson.toString());
				
				if (originJson.equals(this.stripXSS(new String(originJson)))) {
					return false;
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		// log.error("XSS defense, parameter: " + originJson);
		return true;
	}

	/**
	 * hasXSSContent
	 * 
	 * @param XSSRequestWrapper xssRequestWrapper
	 * @param ServletRequest request
	 * @return boolean
	 */
	public boolean hasXSSContent(XSSRequestWrapper xssRequestWrapper, ServletRequest request) {
		BufferedReader reader;
		StringBuffer buffer = new StringBuffer();
		String line = null;
		String originJson = "";
		
		XSSRequestWrapper xssRequestWrapper2 = null;
		javax.servlet.http.HttpServletRequest xssrequest2 = null;
		
		try {
			xssRequestWrapper2 = xssRequestWrapper;
			xssrequest2 = (HttpServletRequest) request;
			reader = xssrequest2.getReader();
			if(reader != null){
				while ((line = reader.readLine()) != null) {
					buffer.append(line);
				}
				
				if(buffer != null){
					originJson = buffer.toString();
					if(!StringUtils.isEmpty(originJson.toString())){
						if (originJson.equals(xssRequestWrapper2.stripXSS(new String(originJson)))) {
							return false;
						}
					}					
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		System.out.println("XSS defense, parameter: " + originJson);
		return true;
	}	
	/**
	 * strip XSS
	 * 
	 * 1. Pattern.CASE_INSENSITIVE : 啟用不區分大小寫的匹配
	 * 2. Pattern.MULTILINE : 啟用多行模式
	 * 3. Pattern.DOTALL : 啟用dotall模式
	 * @param String value
	 * @return String
	 */
	public String stripXSS(String value) {
		if (value != null) {
			// NOTE: It's highly recommended to use the ESAPI library and uncomment the
			// following line to
			// Avoid : encoded attacks.
			// value = ESAPI.encoder().canonicalize(value);

			// Avoid : null characters
			value = value.replaceAll("", "");

			// ########## HTML - start #############################################
			// Avoid : anything between script tags
			Pattern scriptPattern = Pattern.compile("<script>(.*?)</script>", Pattern.CASE_INSENSITIVE);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid : anything in a src='...' type of expression
			scriptPattern = Pattern.compile("src[\r\n]*=[\r\n]*\\\'(.*?)\\\'",
					Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			scriptPattern = Pattern.compile("src[\r\n]*=[\r\n]*\\\"(.*?)\\\"",
					Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			// Remove any lonesome </script> tag
			scriptPattern = Pattern.compile("</script>", Pattern.CASE_INSENSITIVE);
			value = scriptPattern.matcher(value).replaceAll("");

			// Remove any lonesome <script ...> tag
			scriptPattern = Pattern.compile("<script(.*?)>",
					Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid : eval(...) expressions
			scriptPattern = Pattern.compile("eval\\((.*?)\\)",
					Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid : expression(...) expressions
			scriptPattern = Pattern.compile("expression\\((.*?)\\)",
					Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid : javascript:... expressions
			scriptPattern = Pattern.compile("javascript:", Pattern.CASE_INSENSITIVE);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid : vbscript:... expressions
			scriptPattern = Pattern.compile("vbscript:", Pattern.CASE_INSENSITIVE);
			value = scriptPattern.matcher(value).replaceAll("");

			// Avoid : onload= expressions
			scriptPattern = Pattern.compile("onload(.*?)=",
					Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
			value = scriptPattern.matcher(value).replaceAll("");
			// ########## HTML - end #############################################

			// ########## SQL - start #############################################
			// SQL replace string
			final String replaceSql = "-Invalid SQL-";

			// Avoid : insert into table(a,b,c)
			scriptPattern = Pattern.compile("(?i)insert\\s*(?i)into.{1,}\\s*\\(.{1,}\\)");
			value = scriptPattern.matcher(value).replaceAll(replaceSql);

			// Avoid : delete from
			scriptPattern = Pattern.compile("(?i)delete\\s*(?i)from\\s*");
			value = scriptPattern.matcher(value).replaceAll(replaceSql);

			// Avoid : drop table(a,b,c)
			scriptPattern = Pattern.compile("(?i)drop\\s*(?i)table\\s*");
			value = scriptPattern.matcher(value).replaceAll(replaceSql);

			// Avoid : truncate table(a,b,c)
			scriptPattern = Pattern.compile("(?i)truncate\\s*(?i)table\\s*");
			value = scriptPattern.matcher(value).replaceAll(replaceSql);

			// Avoid : update set
			scriptPattern = Pattern.compile("(?i)update.*(?i)set.*=");
			value = scriptPattern.matcher(value).replaceAll(replaceSql);

			// Avoid : select from
			scriptPattern = Pattern.compile("(?i)select.{1,}(?i)from\\s*");
			value = scriptPattern.matcher(value).replaceAll(replaceSql);

			// Avoid : alert table(a,b,c)
			scriptPattern = Pattern.compile("(?i)alert\\s*(?i)table\\s*");
			value = scriptPattern.matcher(value).replaceAll(replaceSql);

			// Avoid : and
			scriptPattern = Pattern.compile("'\\s*(?i)and.*=");
			value = scriptPattern.matcher(value).replaceAll(replaceSql);

			// Avoid : or
			scriptPattern = Pattern.compile("'\\s*(?i)or.*=");
			value = scriptPattern.matcher(value).replaceAll(replaceSql);

			// ########## SQL - end #############################################
		}
		return value;
	}
}
