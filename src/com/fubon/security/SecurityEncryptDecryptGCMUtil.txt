package com.fubon.security;

/** java.security */
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

/** javax.crypto */
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.lang.StringUtils;

public class SecurityEncryptDecryptGCMUtil {

	private static final String ALGORITHM = "PBKDF2WithHmacSHA256";
	private static final String TRANSFORMATION1 = "AES"; /** OK!! */
	private static final String TRANSFORMATION2_2 = "AES/GCM/NoPadding"; /** OK!! */
	private static final String TRANSFORMATION2 = TRANSFORMATION2_2;
	
	private static final int AES_KEY_SIZE = 256;
	private static final int GCM_IV_LENGTH = 12;
	private static final int GCM_TAG_LENGTH = 16;

	/**
	 * encrypt </br>
	 * 
	 * @param strToEncrypt
	 * @param key
	 * @param iv
	 * @return byte[] encryptedReturnValue
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchPaddingException
	 * @throws IllegalBlockSizeException
	 * @throws BadPaddingException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 */
	public byte[] encrypt(String strToEncrypt, SecretKey key, byte[] iv)
			throws NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException,
			InvalidKeyException, InvalidAlgorithmParameterException {
		byte[] encryptedReturnValue = null;
		if (StringUtils.equalsIgnoreCase(TRANSFORMATION2_2, TRANSFORMATION2)) {
			Cipher cipher = Cipher.getInstance(TRANSFORMATION2);
			SecretKeySpec keySpec = new SecretKeySpec(key.getEncoded(), TRANSFORMATION1);
			GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, iv);
			cipher.init(Cipher.ENCRYPT_MODE, keySpec, gcmParameterSpec);
			encryptedReturnValue = cipher.doFinal(strToEncrypt.getBytes());
		}

		return encryptedReturnValue;
	}

	/**
	 * decrypt </br>
	 * 
	 * @param strToDecrypt
	 * @param key
	 * @param iv
	 * @return byte[] decryptedReturnValu
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchPaddingException
	 * @throws IllegalBlockSizeException
	 * @throws BadPaddingException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 */
	public byte[] decrypt(byte[] strToDecrypt, SecretKey key, byte[] iv)
			throws NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException,
			InvalidKeyException, InvalidAlgorithmParameterException {
		byte[] decryptedReturnValue = null;
		if (StringUtils.equalsIgnoreCase(TRANSFORMATION2_2, TRANSFORMATION2)) {
			Cipher cipher = Cipher.getInstance(TRANSFORMATION2);
			SecretKeySpec keySpec = new SecretKeySpec(key.getEncoded(), TRANSFORMATION1);
			GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, iv);
			cipher.init(Cipher.DECRYPT_MODE, keySpec, gcmParameterSpec);
			byte[] decryptedText = cipher.doFinal(strToDecrypt);
			decryptedReturnValue = decryptedText;
		}

		return decryptedReturnValue;
	}
	
	public static void main(String[] args) {

		String strToEncrypt = "test1";
		byte[] strToDecrypt = null;		
		byte[] decryptData = null;
		try {
			SecurityEncryptDecryptGCMUtil securityEncryptDecryptUtil = new SecurityEncryptDecryptGCMUtil();
			KeyGenerator keyGenerator = KeyGenerator.getInstance(TRANSFORMATION1);
			keyGenerator.init(AES_KEY_SIZE);
			SecretKey key = keyGenerator.generateKey();
			byte[] iv = new byte[GCM_IV_LENGTH];
			SecureRandom secureKeyRandomness = SecureRandom.getInstanceStrong();
			secureKeyRandomness.nextBytes(iv);			
			strToDecrypt = securityEncryptDecryptUtil.encrypt(strToEncrypt, key, iv);
			/** System.out.println("--strToDecrypt=--"+Base64.getEncoder().encodeToString(strToDecrypt)); */
			decryptData = securityEncryptDecryptUtil.decrypt(strToDecrypt, key, iv);
			/** System.out.println("-->>> decryptedString=--"+new String(decryptData)); */
		} catch (InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException
				| IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException e) {
			e.printStackTrace();
		}
	}
}
